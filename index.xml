<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>J2J.Dev</title>
    <link>http://BLOG.J2J.DEV/</link>
    <description>Recent content on J2J.Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Mar 2021 14:12:24 +0800</lastBuildDate><atom:link href="http://BLOG.J2J.DEV/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fultter Xcode Build</title>
      <link>http://BLOG.J2J.DEV/posts/flutter/flutter-xcode-build/</link>
      <pubDate>Wed, 10 Mar 2021 14:12:24 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/flutter/flutter-xcode-build/</guid>
      <description>&lt;p&gt;Flutter 创建项目后，Xcode编译项目时的几个问题解决。&lt;/p&gt;
&lt;h2 id=&#34;环境&#34;&gt;环境&lt;/h2&gt;
&lt;p&gt;flutter doctor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[✓] Flutter (Channel stable, 2.0.0, on macOS 11.2.3 20D91 darwin-arm, locale en-CN)
[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.2)
[✓] Xcode - develop for iOS and macOS
[✓] Chrome - develop for the web
[✓] Android Studio (version 4.1)
[✓] VS Code (version 1.54.1)
[✓] Connected device (2 available)

• No issues found!

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>基于Gitlab MR做代码审核 -  2演示</title>
      <link>http://BLOG.J2J.DEV/posts/gitlab-mr-%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 15 Apr 2020 17:52:08 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/gitlab-mr-%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;gitlab-merge-requests-流程说明二---演示&#34;&gt;Gitlab Merge Requests 流程说明二 - 演示&lt;/h1&gt;
&lt;h2 id=&#34;迁出代码&#34;&gt;迁出代码&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#仅克隆远程master分支 
git clone https://gitlab.company.com/demo/prdemo.git

#查看所有分支

git branch -a

#显示如下 

* master  (仅迁出master分支)
  remotes/origin/HEAD -&amp;gt; origin/master
  remotes/origin/develop
  remotes/origin/master
  
# 迁出develop分支

git checkout -b develop origin/develop
git branch -a

* develop (develop已经迁出，且当前处于develop分支中)
  master (master分支已经迁出)
  remotes/origin/HEAD -&amp;gt; origin/master
  remotes/origin/develop
  remotes/origin/master
  
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>基于Gitlab MR做代码审核 -  1基础配置</title>
      <link>http://BLOG.J2J.DEV/posts/gitlab-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8-%E5%90%88%E5%B9%B6/</link>
      <pubDate>Wed, 15 Apr 2020 16:52:08 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/gitlab-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8-%E5%90%88%E5%B9%B6/</guid>
      <description>&lt;h2 id=&#34;分支的说明&#34;&gt;分支的说明&lt;/h2&gt;
&lt;p&gt;gitflow工作流，规范但是过于复杂。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.gitlab.com/ee/topics/img/gitlab_flow_gitdashflow.png&#34; alt=&#34;https://docs.gitlab.com/ee/topics/img/gitlab_flow_gitdashflow.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们采用简易的gitflow工作流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master - 用于准备发布部署&lt;/li&gt;
&lt;li&gt;develop - 用于当前的主线开发&lt;/li&gt;
&lt;li&gt;feature - 用于特定功能的开发&lt;/li&gt;
&lt;li&gt;tag标签 - 用于版本发布 v0.9.10&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Adobe AIR.framework” is damaged and can’t be opened</title>
      <link>http://BLOG.J2J.DEV/posts/adobe-air.framework-is-damaged-macosx-catalina/</link>
      <pubDate>Mon, 13 Apr 2020 16:05:59 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/adobe-air.framework-is-damaged-macosx-catalina/</guid>
      <description>&lt;p&gt;MacOS 升级 Catalina 后,打开Adobe Air出现错误：&lt;strong&gt;“Adobe AIR.framework” is damaged and can’t be opened.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过如下方式移除安全隔离属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /Library/Frameworks
sudo xattr -r -d com.apple.quarantine ./Adobe\ AIR.framework
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>安装Electron</title>
      <link>http://BLOG.J2J.DEV/posts/%E5%AE%89%E8%A3%85electron/</link>
      <pubDate>Fri, 20 Mar 2020 14:17:22 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/%E5%AE%89%E8%A3%85electron/</guid>
      <description>&lt;p&gt;Electron 安装常见错误和解决方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自定义镜像 ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ npm &amp;ndash;registry=https://registry.npm.taobao.org install &lt;a href=&#34;mailto:electron@5.0.13&#34;&gt;electron@5.0.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ndash;unsafe-perm=true&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Instagram的含义</title>
      <link>http://BLOG.J2J.DEV/posts/instagram%E5%9F%9F%E5%90%8D%E5%90%AB%E4%B9%89/</link>
      <pubDate>Tue, 17 Mar 2020 16:58:31 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/instagram%E5%9F%9F%E5%90%8D%E5%90%AB%E4%B9%89/</guid>
      <description>&lt;p&gt;Instagram 的名称取自&amp;quot;即时&amp;quot;（英语：instant ）与“电报”（英语：telegram ）两个单词的结合。因为创始人灵感来自即时成像相机，且认为人与人之间的照片分享“就像用电线传递电报消息”，因而将两个单词结合成软件名称&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beego 多数据库支持（主从分离等)</title>
      <link>http://BLOG.J2J.DEV/posts/beego-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB%E7%AD%89/</link>
      <pubDate>Thu, 02 Jan 2020 14:28:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/beego-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB%E7%AD%89/</guid>
      <description>&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;使用 orm.RegisterDataBase 注册多个数据库，其中一个为default，且为主库.&lt;/p&gt;
&lt;p&gt;ORM must register a database with alias default.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>编译安装蓝鲸智云配置平台(BlueKing CMDB) - CentOS8</title>
      <link>http://BLOG.J2J.DEV/posts/bk-cmdb-centos8/</link>
      <pubDate>Wed, 11 Dec 2019 10:31:51 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/bk-cmdb-centos8/</guid>
      <description>&lt;h2 id=&#34;步骤说明&#34;&gt;步骤说明&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Golang环境安装配置&lt;/li&gt;
&lt;li&gt;Nodejs环境安装配置&lt;/li&gt;
&lt;li&gt;代码编译bk-cmdb&lt;/li&gt;
&lt;li&gt;部署ZooKeeper&lt;/li&gt;
&lt;li&gt;部署Redis&lt;/li&gt;
&lt;li&gt;部署MongoDB&lt;/li&gt;
&lt;li&gt;安装bk-cmdb&lt;/li&gt;
&lt;li&gt;运行&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Keynote 与 Pages的区别</title>
      <link>http://BLOG.J2J.DEV/posts/keynotevspages/</link>
      <pubDate>Thu, 07 Nov 2019 19:50:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/keynotevspages/</guid>
      <description>&lt;p&gt;Employees and students often need to create attractive documents for presentations and text documents. Popular commercial software for creating great-looking documents includes PowerPoint, Keynote and Pages. PowerPoint is a Microsoft product, while Apple makes Keynote and Pages. While there are similarities between the three programs, there are also major differences. Choosing between the three when creating a document depends on your needs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机中的时间延迟</title>
      <link>http://BLOG.J2J.DEV/posts/latency-comparison-numbers/</link>
      <pubDate>Wed, 30 Oct 2019 14:28:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/latency-comparison-numbers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gist.github.com/jboner/2841832&#34;&gt;https://gist.github.com/jboner/2841832&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Latency Comparison Numbers (~2012)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>广告名词</title>
      <link>http://BLOG.J2J.DEV/posts/%E5%B9%BF%E5%91%8A%E5%90%8D%E8%AF%8D%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 24 Oct 2019 14:28:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/%E5%B9%BF%E5%91%8A%E5%90%8D%E8%AF%8D%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;dsp需求方平台-demand-side-platform&#34;&gt;DSP：需求方平台 (demand-side platform)&lt;/h2&gt;
&lt;p&gt;A demand-side platform (DSP) allows buyers of digital ad inventory to manage multiple ad exchanges via one interface. These buyers commonly include trading desks, agencies, or advertisers directly.&lt;/p&gt;
&lt;p&gt;To enable these buyers to bid on digital inventory, the DSP has to plug into an SSP. This programmatic advertising supply chain is visualized in the graphic below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 日期时间格式化显示</title>
      <link>http://BLOG.J2J.DEV/posts/golang-dateformate/</link>
      <pubDate>Fri, 18 Oct 2019 17:38:58 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/golang-dateformate/</guid>
      <description>&lt;p&gt;Golang的日期格式化没有采用SimpleDateFormat的日期格式(yyyyMMhh HH:mm:ss), 而采用了一种非常怪异的(1 2 3 4 5 6 -7)格式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac OS 限制网络速度</title>
      <link>http://BLOG.J2J.DEV/posts/mac-os-%E9%99%90%E5%88%B6%E7%BD%91%E7%BB%9C%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Wed, 16 Oct 2019 18:50:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/mac-os-%E9%99%90%E5%88%B6%E7%BD%91%E7%BB%9C%E9%80%9F%E5%BA%A6/</guid>
      <description>&lt;p&gt;因为网络共享，看视频或下载的时候会占用大量带宽，导致网络卡顿，影响他人的使用。速度太快还会被网管断开连接(下载Xcode或更新时经常出现)。下面是搜索到的两种限制网速的方式。苹果官方提供了限制系统整体网速的Network Link Conditioner 和 OpenBSD&amp;rsquo;s Packet Filter 命令行工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库连接池</title>
      <link>http://BLOG.J2J.DEV/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Tue, 15 Oct 2019 18:50:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>&lt;p&gt;使用数据库连接池优化单数据服务器，提升其性能。以及Golang中的配置方式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 7.1</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-7.1/</link>
      <pubDate>Sat, 28 Apr 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-7.1/</guid>
      <description>&lt;p&gt;从 commit f6fa4f88797030b8e83066cb262a68958953974e 后，go-ethereum 将功能比较独立的代码分装为模块了。&lt;/p&gt;
&lt;p&gt;后面的几次提交 分别独立出来了一下几个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github.com/ethereum/ethwire-go wire协议处理&lt;/li&gt;
&lt;li&gt;github.com/ethereum/ethutil-go  编解码等功能处理&lt;/li&gt;
&lt;li&gt;github.com/ethereum/ethdb-go 数据库处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们选择模块拆分后，并通过编译的版本分析代码变化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout 4ea93eba501cf996395e4c0829e21cab77267cf9 

&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;commit 4ea93eba501cf996395e4c0829e21cab77267cf9 (HEAD)
Author: obscuren &amp;lt;geffobscura@gmail.com&amp;gt;
Date:   Wed Jan 15 23:32:30 2014 +0100

    Updated tests

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上三个独立模块，在github上原仓库已经没有了。 有部分用户在github上克隆了一份。我们将代码clone下来并按照原包名放置。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 7.2</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-7.2/</link>
      <pubDate>Sat, 28 Apr 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-7.2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/tree/f6d1bfe45bf3709d7bad40bf563b5c09228622e3&#34;&gt;https://github.com/ethereum/go-ethereum/tree/f6d1bfe45bf3709d7bad40bf563b5c09228622e3&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 6</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-6/</link>
      <pubDate>Fri, 20 Apr 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-6/</guid>
      <description>&lt;p&gt;go-ethereum 网络的雏形。 代码仍然停留在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit ba385ccdf15f8379c54d65061c3d62353baffc2b (HEAD)
Author: obscuren &amp;lt;geffobscura@gmail.com&amp;gt;
Date:   Fri Jan 10 10:59:57 2014 +0100

    sudo not udo
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 5</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-5/</link>
      <pubDate>Tue, 17 Apr 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-5/</guid>
      <description>&lt;h2 id=&#34;daggergo-dagger工作量证明-&#34;&gt;dagger.go (Dagger工作量证明 )&lt;/h2&gt;
&lt;p&gt;Ethash 是 Ethereum 的PoW(工作量证明)算法。 该算法需要大量的数据集合，该集合被称为DAG. Ethash 算法由&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/Dagger-Hashimoto&#34;&gt;Dagger-Hashimoto&lt;/a&gt; 算法改进而得，Dagger Hashimoto是Ethereum 1.0 挖矿算法的推荐规范 。&lt;/p&gt;
&lt;p&gt;Dagger Hashimoto 基于已经存在的关键算法：Hashimoto 和 Dagger。&lt;/p&gt;
&lt;p&gt;在go-ethereum 提交记录 9f133a92d0853102863b77dd7c884d1462cf73a4 中，第一次提交了dagger的实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit 9f133a92d0853102863b77dd7c884d1462cf73a4 (HEAD)
Author: obscuren &amp;lt;geffobscura@gmail.com&amp;gt;
Date:   Wed Jan 8 23:41:03 2014 +0100

    First dagger impl

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 4</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-4/</link>
      <pubDate>Wed, 11 Apr 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-4/</guid>
      <description>&lt;h2 id=&#34;triego-merkle-patricia-tree-&#34;&gt;Trie.go (Merkle-patricia-tree )&lt;/h2&gt;
&lt;p&gt;Merkle Patricia Tree(简称MPT树，实际上是一种trie前缀树)是以太坊中的一种加密认证的数据结构，可以用来存储所有的(key，value)对。&lt;/p&gt;
&lt;p&gt;以太坊区块链中的区块由标题，交易列表和叔区块列表组成。区块头中包含交易的根哈希，它用于验证交易列表。在区块头部包括了交易的hash树根，用来校验交易的列表。在p2p网络上传输的交易是一个简单的列表，它们被组装成一个叫做trie树的特殊数据结构，来计算根hash。值得注意的是，除了校验区块外，这个数据结构并不是必须的，一旦区块被验证正确，那么它在技术上是可以忽略的。但是，这意味着交易列表在本地以trie树的形式存储，发送给客户端的时候序列化成列表。客户端接收到交易列表后重新构建交易列表trie树来验证根hash。RLP(Recursive length prefix encoding,递归长度前缀编码)，用来对trie树种所有的条目进行编码。对RLP的介绍和源码实现阅读可参考&lt;a href=&#34;http://www.cnspirit.com/2018/03/go-ethereum-2.html&#34;&gt;阅读 go-ethereum 源码 - 2&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;Merkle Patricia Tree的Wiki可在&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/Patricia-Tree&#34;&gt;https://github.com/ethereum/wiki/wiki/Patricia-Tree&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;go-ethereum源码中对MPT数的处理时在文件 **trie.go **中。
进入go-ethereum 源码查看trie.go .&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout 9f133a92d0853102863b77dd7c884d1462cf73a4

或通过如下方式在线浏览：

https://github.com/ethereum/go-ethereum/blob/9f133a92d0853102863b77dd7c884d1462cf73a4/trie.go

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 3</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-3/</link>
      <pubDate>Fri, 30 Mar 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-3/</guid>
      <description>&lt;p&gt;从初始代码提交到commit ad048e9f445ff96b7bfd75c104ab923e1e06754b，go-ethereum的结构&amp;amp;功能变化不大。主要变化有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将rlp编解码移动到 rlp.go文件中&lt;/li&gt;
&lt;li&gt;完善 transaction、block的rlp编解码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到了commit a926686445929d091c2d9e019b017600168e9e47，源码中出现了较大的功能加入。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Added sample server, genesis block, and database interface
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是本次提交出现，无法编译通过。错误为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./database.go:65: cannot use k (type []int) as type string in function argument

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以迁出下一次提交 并逐一分析源码、功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout f17930eb4661721cd0e1b92765448c589441907b

或在线浏览：

https://github.com/ethereum/go-ethereum/tree/f17930eb4661721cd0e1b92765448c589441907b
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 2</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-2/</link>
      <pubDate>Mon, 26 Mar 2018 09:40:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-2/</guid>
      <description>&lt;p&gt;RLP（递归长度前缀）的目的是编码任意嵌套的二进制数据数组，RLP是以太坊中用于序列化对象的主要编码方法。 RLP的唯一目的是编码结构; 对于编码的数据的具体类型（例如字符串，浮点数）则留给高阶协议自己负责处理。（简单来说编码的二进制数据，代表的是字符串、浮点数还是其他类型。由使用该编码的高级协议定义）;RLP编码的整数必须以大端二进制形式（big endian）表示，且不包含前导零（整数值零等于空字节数组）。 反序列化正整数时如发现前缀有零的必须视为无效。 字符串长度的整数表示也必须以这种方式进行编码，其他部分的整数同样如此。 更多信息可以在&lt;a href=&#34;https://ethereum.github.io/yellowpaper/paper.pdf&#34;&gt;Ethereum黄皮书&lt;/a&gt; 附录B中找到。&lt;/p&gt;
&lt;p&gt;如果有人希望使用RLP对字典进行编码，有两个建议&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照字典顺序使用[[k1,v1],[k2,v2]&amp;hellip;]进行编码&lt;/li&gt;
&lt;li&gt;或者使用更高级别的&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/Patricia-Tree&#34;&gt;Patricia Tree&lt;/a&gt;编码&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Read Go Ethereum Source Code 1</title>
      <link>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-1/</link>
      <pubDate>Mon, 26 Mar 2018 09:33:48 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/go-ethereum/read-go-ethereum-source-code-1/</guid>
      <description>&lt;p&gt;如何理解系统的设计？最好的方法当然是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read The Fucking Source Code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;go-ethereum-是什么&#34;&gt;Go Ethereum 是什么&lt;/h2&gt;
&lt;p&gt;以太坊从项目早起，就有不同操作系统下的多客户端实现。这些客户端可以互相验证以太坊的协议正确性。go-ethereum 是以太坊协议的go语言实现的客户端。&lt;/p&gt;
&lt;p&gt;截止2016年9月，&lt;a href=&#34;http://www.ethdocs.org/en/latest/ethereum-clients/go-ethereum/index.html#go-ethereum&#34;&gt;go-ethereum&lt;/a&gt;(go语言实现) 和 &lt;a href=&#34;http://www.ethdocs.org/en/latest/ethereum-clients/parity/index.html#parity&#34;&gt;Parity&lt;/a&gt;(Rust语言实现) 是领先的实现方案。&lt;/p&gt;
&lt;p&gt;以太坊的协议标准在其&lt;a href=&#34;https://github.com/ethereum/yellowpaper&#34;&gt;黄皮书&lt;/a&gt;中定义。&lt;/p&gt;
&lt;p&gt;go-ethereum 由 &lt;a href=&#34;https://github.com/obscuren&#34;&gt;Jeffrey Wilcke&lt;/a&gt; 领导开发，项目启动与2013年，开发语言为Go。go-ethereum在2015年7月30日成功发布，标志着创世区块和以太坊平台的发布。&lt;/p&gt;
&lt;p&gt;Jeff Wilcke 为以太坊的创始人之一，并是以太坊的三位董事之一。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://BLOG.J2J.DEV/posts/my-first-post/</link>
      <pubDate>Sat, 14 Jan 2017 09:50:35 +0800</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/my-first-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://BLOG.J2J.DEV/posts/tmux/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://BLOG.J2J.DEV/posts/tmux/tmux/</guid>
      <description>tmux session 命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称&amp;quot;窗口&amp;quot;），在里面输入命令。用户与计算机的这种临时的交互，称为一次&amp;quot;会话&amp;quot;（session） 。
会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。
为了解决这个问题，会话与窗口可以&amp;quot;解绑&amp;quot;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&amp;quot;绑定&amp;quot;其他窗口。
Tmux 就是会话与窗口的&amp;quot;解绑&amp;quot;工具，将它们彻底分离。
window pan </description>
    </item>
    
  </channel>
</rss>
